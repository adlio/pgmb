// Code generated by go generate; DO NOT EDIT.
package pgmb

import (
	"strings"
	"github.com/pkg/errors"
)

// ReleasePackagingQuery is a queryer for ReleasePackaging data
type ReleasePackagingQuery struct {
	db      DB
	builder SelectBuilder
	processors []ReleasePackagingCollectionProcessor
}

// ReleasePackagings is the constructor for ReleasePackagingQuery
func ReleasePackagings(db DB, columns ...string) ReleasePackagingQuery {

	var selectClause string
	if len(columns) > 0 {
		selectClause = strings.Join(columns, ", ")
	} else {
		selectClause = "id, gid, name, child_order, description"
	}

	q := ReleasePackagingQuery{
		db:      db,
		builder: SelectBuilder{}.Select(selectClause).From("release_packaging"),
	}
	return q
}

// ReleasePackagingCollection is a slice of ReleasePackaging
type ReleasePackagingCollection []*ReleasePackaging

// ReleasePackagingCollectionProcessor is a function which modifies each element in a ReleasePackagingCollection
// (typically by populting additional data on it)
type ReleasePackagingCollectionProcessor func(DB, ReleasePackagingCollection) error

// Select adjusts the columns returned from the query
func (q ReleasePackagingQuery) Select(columns string) ReleasePackagingQuery {
	q.builder = q.builder.Select(columns)
	return q
}

// Where adds an additional where clause to the query
func (q ReleasePackagingQuery) Where(cmd string, args ...interface{}) ReleasePackagingQuery {
	q.builder = q.builder.Where(cmd, args...)
	return q
}

// OrderBy adjusts the ordering criteria for the query
func (q ReleasePackagingQuery) OrderBy(cmd string) ReleasePackagingQuery {
	q.builder = q.builder.OrderBy(cmd)
	return q
}

// All returns all results from the query
func (q ReleasePackagingQuery) All() (results ReleasePackagingCollection, err error) {
	results = make(ReleasePackagingCollection, 0)
	err = Select(q.db, &results, q.builder)
	if err != nil {
		err = errors.Wrap(err, "ReleasePackagingQuery.All() failed to populate ReleasePackagingCollection.")
		return
	}
	for _, f := range q.processors {
		err = f(q.db, results)
		if err != nil {
			err = errors.Wrap(err, "Failed to run processor over ReleasePackagingCollection.")
		}
	}
	return
}

// One returns a single result from the query
func (q ReleasePackagingQuery) One() (result *ReleasePackaging, err error) {
	results := make(ReleasePackagingCollection, 0, 1)
	err = Select(q.db, &results, q.builder)
	if err != nil {
		err = errors.Wrap(err, "ReleasePackagingQuery.One() failed to populate initial result set.")
		return
	}

	for _, f := range q.processors {
		err = f(q.db, results)
		if err != nil {
			err = errors.Wrap(err, "Failed to run processor over ReleasePackagingCollection.")
			return
		}
	}

	if len(results) > 0 {
		result = results[0]
	}

	return result, nil
}
