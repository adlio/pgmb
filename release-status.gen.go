// Code generated by go generate; DO NOT EDIT.
package pgmb

import (
	"strings"
	"github.com/pkg/errors"
)

// ReleaseStatusQuery is a queryer for ReleaseStatus data
type ReleaseStatusQuery struct {
	db      DB
	builder SelectBuilder
	processors []ReleaseStatusCollectionProcessor
}

// ReleaseStatuses is the constructor for ReleaseStatusQuery
func ReleaseStatuses(db DB, columns ...string) ReleaseStatusQuery {

	var selectClause string
	if len(columns) > 0 {
		selectClause = strings.Join(columns, ", ")
	} else {
		selectClause = "id, gid, name, child_order, description"
	}

	q := ReleaseStatusQuery{
		db:      db,
		builder: SelectBuilder{}.Select(selectClause).From("release_status"),
	}
	return q
}

// ReleaseStatusCollection is a slice of ReleaseStatus
type ReleaseStatusCollection []*ReleaseStatus

// ReleaseStatusCollectionProcessor is a function which modifies each element in a ReleaseStatusCollection
// (typically by populting additional data on it)
type ReleaseStatusCollectionProcessor func(DB, ReleaseStatusCollection) error

// Select adjusts the columns returned from the query
func (q ReleaseStatusQuery) Select(columns string) ReleaseStatusQuery {
	q.builder = q.builder.Select(columns)
	return q
}

// Where adds an additional where clause to the query
func (q ReleaseStatusQuery) Where(cmd string, args ...interface{}) ReleaseStatusQuery {
	q.builder = q.builder.Where(cmd, args...)
	return q
}

// OrderBy adjusts the ordering criteria for the query
func (q ReleaseStatusQuery) OrderBy(cmd string) ReleaseStatusQuery {
	q.builder = q.builder.OrderBy(cmd)
	return q
}

// All returns all results from the query
func (q ReleaseStatusQuery) All() (results ReleaseStatusCollection, err error) {
	results = make(ReleaseStatusCollection, 0)
	err = Select(q.db, &results, q.builder)
	if err != nil {
		err = errors.Wrap(err, "ReleaseStatusQuery.All() failed to populate ReleaseStatusCollection.")
		return
	}
	for _, f := range q.processors {
		err = f(q.db, results)
		if err != nil {
			err = errors.Wrap(err, "Failed to run processor over ReleaseStatusCollection.")
		}
	}
	return
}

// One returns a single result from the query
func (q ReleaseStatusQuery) One() (result *ReleaseStatus, err error) {
	results := make(ReleaseStatusCollection, 0, 1)
	err = Select(q.db, &results, q.builder)
	if err != nil {
		err = errors.Wrap(err, "ReleaseStatusQuery.One() failed to populate initial result set.")
		return
	}

	for _, f := range q.processors {
		err = f(q.db, results)
		if err != nil {
			err = errors.Wrap(err, "Failed to run processor over ReleaseStatusCollection.")
			return
		}
	}

	if len(results) > 0 {
		result = results[0]
	}

	return result, nil
}
