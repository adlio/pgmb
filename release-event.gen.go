// Code generated by go generate; DO NOT EDIT.
package pgmb

import (
	sq "github.com/Masterminds/squirrel"
	"github.com/pkg/errors"
)

// ReleaseEventQueryFunc can be chained together to modify a ReleaseEventQuery
type ReleaseEventQueryFunc func(ReleaseEventQuery) ReleaseEventQuery

// ReleaseEventQuery is a queryer for ReleaseEvent data
type ReleaseEventQuery struct {
	db         DB
	builder    sq.SelectBuilder
	processors []ReleaseEventCollectionProcessor
}

// ReleaseEvents is the constructor for ReleaseEventQuery
func ReleaseEvents(db DB) ReleaseEventQuery {
	q := ReleaseEventQuery{
		db:      db,
		builder: ReleaseEventSelect(),
	}
	return q
}

// ReleaseEventCollection is a slice of ReleaseEvent
type ReleaseEventCollection []*ReleaseEvent

// ReleaseEventCollectionProcessor is a function which modifies each element in a ReleaseEventCollection
// (typically by populting additional data on it)
type ReleaseEventCollectionProcessor func(DB, ReleaseEventCollection) error

// Select can be used to replace ReleaseEventSelect() with a different squirrel.SelectBuilder
// to pull different fields or join data differently.
func (q ReleaseEventQuery) Select(b sq.SelectBuilder) ReleaseEventQuery {
	q.builder = b
	return q
}

// Where adds an additional where clause to the query
func (q ReleaseEventQuery) Where(cmd string, args ...interface{}) ReleaseEventQuery {
	q.builder = q.builder.Where(cmd, args...)
	return q
}

// OrderBy adjusts the ordering criteria for the query
func (q ReleaseEventQuery) OrderBy(cmd string) ReleaseEventQuery {
	q.builder = q.builder.OrderBy(cmd)
	return q
}

// All returns all results from the query
func (q ReleaseEventQuery) All() (results ReleaseEventCollection, err error) {
	results = make(ReleaseEventCollection, 0)
	err = Select(q.db, &results, q.builder)
	if err != nil {
		err = errors.Wrap(err, "ReleaseEventQuery.All() failed to populate ReleaseEventCollection.")
		return
	}
	for _, f := range q.processors {
		err = f(q.db, results)
		if err != nil {
			err = errors.Wrap(err, "Failed to run processor over ReleaseEventCollection.")
		}
	}
	return
}

// One returns a single result from the query
func (q ReleaseEventQuery) One() (result *ReleaseEvent, err error) {
	results := make(ReleaseEventCollection, 0, 1)
	err = Select(q.db, &results, q.builder)
	if err != nil {
		err = errors.Wrap(err, "ReleaseEventQuery.One() failed to populate initial result set.")
		return
	}

	for _, f := range q.processors {
		err = f(q.db, results)
		if err != nil {
			err = errors.Wrap(err, "Failed to run processor over ReleaseEventCollection.")
			return
		}
	}

	if len(results) > 0 {
		result = results[0]
	}

	return result, nil
}
