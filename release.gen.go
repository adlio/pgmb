// Code generated by go generate; DO NOT EDIT.
package pgmb

import (
	sq "github.com/Masterminds/squirrel"
	"github.com/pkg/errors"
)

// ReleaseQueryFunc can be chained together to modify a ReleaseQuery
type ReleaseQueryFunc func(ReleaseQuery) ReleaseQuery

// ReleaseQuery is a queryer for Release data
type ReleaseQuery struct {
	db         DB
	builder    sq.SelectBuilder
	processors []ReleaseCollectionProcessor
}

// Releases is the constructor for ReleaseQuery
func Releases(db DB) ReleaseQuery {
	q := ReleaseQuery{
		db:      db,
		builder: ReleaseSelect(),
	}
	return q
}

// ReleaseCollection is a slice of Release
type ReleaseCollection []*Release

// ReleaseCollectionProcessor is a function which modifies each element in a ReleaseCollection
// (typically by populting additional data on it)
type ReleaseCollectionProcessor func(DB, ReleaseCollection) error

// Select can be used to replace ReleaseSelect() with a different squirrel.SelectBuilder
// to pull different fields or join data differently.
func (q ReleaseQuery) Select(b sq.SelectBuilder) ReleaseQuery {
	q.builder = b
	return q
}

// Where adds an additional where clause to the query
func (q ReleaseQuery) Where(cmd string, args ...interface{}) ReleaseQuery {
	q.builder = q.builder.Where(cmd, args...)
	return q
}

// OrderBy adjusts the ordering criteria for the query
func (q ReleaseQuery) OrderBy(cmd string) ReleaseQuery {
	q.builder = q.builder.OrderBy(cmd)
	return q
}

// All returns all results from the query
func (q ReleaseQuery) All() (results ReleaseCollection, err error) {
	results = make(ReleaseCollection, 0)
	err = Select(q.db, &results, q.builder)
	if err != nil {
		err = errors.Wrap(err, "ReleaseQuery.All() failed to populate ReleaseCollection.")
		return
	}
	for _, f := range q.processors {
		err = f(q.db, results)
		if err != nil {
			err = errors.Wrap(err, "Failed to run processor over ReleaseCollection.")
		}
	}
	return
}

// One returns a single result from the query
func (q ReleaseQuery) One() (result *Release, err error) {
	results := make(ReleaseCollection, 0, 1)
	err = Select(q.db, &results, q.builder)
	if err != nil {
		err = errors.Wrap(err, "ReleaseQuery.One() failed to populate initial result set.")
		return
	}

	for _, f := range q.processors {
		err = f(q.db, results)
		if err != nil {
			err = errors.Wrap(err, "Failed to run processor over ReleaseCollection.")
			return
		}
	}

	if len(results) > 0 {
		result = results[0]
	}

	return result, nil
}
